OOPS help in designing code using object 
class:blueprint 
object:instance

===Oops have 4 fundamental:====================
1.Abstraction
2.Encapsulation
3.Inheritance
4.Polymorphism

===Prototype====================================
Every object in JavaScript has a built-in property, which is called its prototype.
1.Object are linked to a prototype object;
2.Prototype Inheritance:The Prototype contain method(Behaviour) that are accessible to all object linked to that prototype.
Object-can access method
Prototype-contain method

Three way to implementing prototypal inheritance in Javascript:
1.Constructor function
2.ES6 class
3.Object.create(); 

==Constructor Function and New Opertaor=================
1.Technique to create object from a function.
2.This is how built-object like array,maps,set are actually Implemented

example:
var Person=function(firstName,age)
{
    this.firstName=firstName;
    this.age=age;
};

var details=new Person('Mukesh',28);
console.log(details)

===Prototype==========================================
var Person=function(firstName,age)
{
    this.firstName=firstName;
    this.age=age;
 //This is not good Practice because it will execute for each request
    /*function calcAge()
    {

    }*/
};

Person.prototype.calcAge=function()
{
    return console.log(2023-this.age);
}

var details=new Person('Mukesh',28);
console.log(details)

details.calcAge(1996)

=====ES6 CLASS===================
1.Classes are not hoisted(means cant use before declaration)
2.classes are first-class citizen(pass to function and return from function);
3.class are executed in strict mode.

class Details{
    constructor(name,birthyear){
        this.name=name;
        this.birthyear=birthyear;
    }

    ageCalculate(){
        return console.log(2023-this.birthyear);
    }

    sayHi(){
        return console.log(`Hi ${this.name}`);
    }
}

const mukeshDetail=new Details('Mukesh',1996);
console.log(mukeshDetail);
mukeshDetail.ageCalculate(); //27
mukeshDetail.sayHi(); //Hi Mukesh

---Getter&Setter----------------------------------

const account={
    owner:'Mukesh',
    transaction:[200,400,150,350],

    get transactionGet()
    {
        return this.transaction.slice(-1).pop();

    },

    set transactionSet(mov)
    {
        return this.transaction.push(mov);

    },
};

console.log(account.transactionGet);

console.log(account.transaction);

account.transactionSet(20);

===Static Method=================
class Car {
  constructor(name) {
    this.name = name;
  }
  static hello() {
    return "Hello!!";
  }
}

const myCar = new Car("Ford");

// You can call 'hello()' on the Car Class:
document.getElementById("demo").innerHTML = Car.hello();

// But NOT on a Car Object:
// document.getElementById("demo").innerHTML = myCar.hello();
// this will raise an error.

===Object.create()===================================================
const Details={
  BasicDetails ()
  {
    console.log(2024-this.age);
  },

  other(name,age)
  {
    this.name=name;
    this.age=age;
  }
};

var mukesh=Object.create(Details);
console.log(mukesh);
mukesh.firstName='Mukesh';
mukesh.age=27;
mukesh.BasicDetails();

//shortest way
var urmi=Object.create(Details);
urmi.other('Mukesh',27);
console.log(urmi);








